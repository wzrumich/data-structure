Exam #1 score (zeruiw2): 6/6

=== Grade Feedback for Problem "exam1_createSmallClass_cube" ===
[1/1]: Test: default constructor
[1/1]: Test: one parameter constructor
[1/1]: Test: use of type double
=====
[3/3]

--- stdout ---
g++ -g -O0 -Wall -Wextra main.cpp cube.cpp -o cube-tester
Testing default constructor...
+ PASS : (new cube())->getVolume == 1

Testing one parameter constructor...
+ PASS : (new cube(2))->getVolume == 8

Testing use of type double...
+ PASS : (new cube(2.5))->getVolume == 2.5 * 2.5 * 2.5



--- stderr ---


--- submitted file: cube.cpp ---
#include "cube.h"


cube::cube(){
  this->d=1.0;
}
cube::cube(double length){
  this->d=length;
}
double cube::getVolume(){
return d*d*d;
}


//
// The cube class must:
//
// - Store a variable d (stored as a double), which represents the length of
//   one edge of the cube.
//
// - Have a default constructor that sets the length of the edge of the cube
//   to 1.0.
//
// - Have a second constructor that takes one parameter: the length of one
//   edge of the cube
//
// - Have a getVolume function that takes no parameters and returns the volume
//   of the cube (as a double):
//   - The volume of the cube can be calculated by: d * d * d
//

--- submitted file: cube.h ---
#ifndef _CUBE_H
#define _CUBE_H



class cube{

public:
  cube();
  cube(double length);
  double getVolume();
private:
  double d;

};
//
// The cube class must:
//
// - Store a variable d (stored as a double), which represents the length of
//   one edge of the cube.
//
// - Have a default constructor that sets the length of the edge of the cube
//   to 1.0.
//
// - Have a second constructor that takes one parameter: the length of one
//   edge of the cube
//
// - Have a getVolume function that takes no parameters and returns the volume
//   of the cube (as a double):
//   - The volume of the cube can be calculated by: d * d * d
//

#endif


=== Grade Feedback for Problem "exam1_mp1-like_illiniBlue2" ===
[1/1]: Test: in_1.png
[1/1]: Test: in_2.png
[1/1]: Test: in_3.png
=====
[3/3]

--- stdout ---
g++ -std=c++1y -c -g -O0 -Wall -Wextra -pedantic main.cpp
g++ -std=c++1y -c -g -O0 -Wall -Wextra -pedantic png.cpp
g++ -std=c++1y -c -g -O0 -Wall -Wextra -pedantic rgbapixel.cpp
g++ main.o png.o rgbapixel.o -std=c++1y -lpng -lpthread -o main


--- stderr ---


--- submitted file: main.cpp ---
#include <algorithm>
#include <iostream>

#include "rgbapixel.h"
#include "png.h"

using namespace std;

PNG transform_illini_blue(PNG original) {
int width = original.width();
int height= original.height();
for(int i=0; i<width;i++){
	for(int j=0; j<height; j++){
		original(i,j)->blue=255;
	}
}
return original;




	//
	// To "Illini Blue" an image, you must:
	// - Set the blue component of every pixel to 255.
	// - The value of the red and green components in each pixel must not
	//   be changed.
	//

}

int main() {
	PNG image("in.png");
	image = transform_illini_blue(image);
	image.writeToFile("out.png");
	return 0;
}


